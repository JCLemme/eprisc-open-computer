# epRISC v5 - core definition file


core=EPRISC_STD
    
    enum:REGISTER=IP:0/SP:1/CS:2/GL:3/WW:0/WX:1/WY:2/WZ:3/XW:4/XX:5/XY:6/XZ:7/YW:8/YX:9/YY:10/YZ:11/ZW:12/ZX:13/ZY:14/ZZ:15
    
    enum:CONDITION=ALC:0/EQL:1/NEQ:2/HOS:3/LOW:4/NEG:5/POZ:6/OVF:7/NOV:8/HIG:9/LOS:10/GET:11/LET:12/GRT:13/LST:14
    
    enum:BRANCHALT=NONE:0/SVLK:4/SVSK:5/RSLK:6/RSSK:7
    
    enum:BOOLEAN=FALSE:0/TRUE:1
    
    inst=BRCH.O  #Branch, register and 20-bit offset
        format=1LLLCCCCRRRROOOOOOOOOOOOOOOOOOOO
        L=ENUMT:BRANCHALT:NONE
        C=ENUMT:CONDITION:ALC
        R=ENUMT:REGISTER:IP
        O=VALUE:h00
    endinst
 
    inst=BRCH.O  #Branch, register and 20-bit address
        format=1LLLCCCCRRRRAAAAAAAAAAAAAAAAAAAA
        L=ENUMT:BRANCHALT:NONE
        C=ENUMT:CONDITION:ALC
        R=ENUMT:REGISTER:IP
        A=ADDRS
    endinst
    
    inst=CALL.S  #Branch, call subroutine, register and 20-bit offset
        format=1101CCCCRRRROOOOOOOOOOOOOOOOOOOO
        L=ENUMT:BRANCHALT:NONE
        C=ENUMT:CONDITION:ALC
        R=ENUMT:REGISTER:IP
        O=VALUE:h00
    endinst
 
    inst=CALL.L  #Branch, call subroutine, register and 20-bit address
        format=1100CCCCRRRRAAAAAAAAAAAAAAAAAAAA
        L=ENUMT:BRANCHALT:NONE
        C=ENUMT:CONDITION:ALC
        R=ENUMT:REGISTER:IP
        A=ADDRS
    endinst
    
    inst=RTRN.S  #Branch, return from stack
        format=1111CCCC000000000000000000000000
        C=ENUMT:CONDITION:ALC
    endinst
    
    inst=RTRN.L  #Branch, return from stack
        format=1110CCCC000000000000000000000000
        C=ENUMT:CONDITION:ALC
    endinst
    
    # # # # # # # #
    
    inst=LOAD.O  #Load, register and 20-bit offset
        format=0100RRRRDDDDOOOOOOOOOOOOOOOOOOOO
        R=ENUMT:REGISTER
        D=ENUMT:REGISTER
        O=VALUE:h0
    endinst
       
    inst=STOR.O  #Store, register and 20-bit offset
        format=0110RRRRDDDDOOOOOOOOOOOOOOOOOOOO
        R=ENUMT:REGISTER
        D=ENUMT:REGISTER
        O=VALUE:h0
    endinst

    inst=LOAD.A  #Load, register and 20-bit address
        format=0100RRRRDDDDAAAAAAAAAAAAAAAAAAAA
        R=ENUMT:REGISTER
        D=ENUMT:REGISTER
        A=ADDRS
    endinst
       
    inst=STOR.A  #Store, register and 20-bit address
        format=0110RRRRDDDDAAAAAAAAAAAAAAAAAAAA
        R=ENUMT:REGISTER
        D=ENUMT:REGISTER
        A=ADDRS
    endinst
    
    inst=PUSH.R  #Store, push to stack
        format=01100001SSSS00000000000000000000
        S=ENUMT:REGISTER
    endinst
       
    inst=POPS.R  #Load, pop from stack
        format=01000001DDDD00000000000000000000
        D=ENUMT:REGISTER
    endinst
    
    # # # # # # # #
    
    inst=MOVE.V  #Move, 20-bit value
        format=001ODDDDSSSSVVVVVVVVVVVVVVVVVVVV
        O=ENUMT:BOOLEAN:FALSE
        D=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst

    inst=MOVE.A  #Move, 20-bit address
        format=001ODDDDSSSSAAAAAAAAAAAAAAAAAAAA
        O=ENUMT:BOOLEAN:FALSE
        D=ENUMT:REGISTER
        S=VALUE:h0
        A=LABEL
    endinst
    
    # # # # # # # #
    
    inst=ARTH.R  #Arithmetic operation, two registers
        format=0001000OOOOODDDDAAAABBBBVVVVVVVV
        O=VALUE:h0
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ARTH.V  #Arithmetic operation, register and 8-bit value
        format=0001100OOOOODDDDAAAASSSSVVVVVVVV
        O=VALUE:h0
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=ADDR.R  #Add, two registers
        format=000100000000DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ADDR.V  #Add, register and 8-bit value
        format=000110000000DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=SUBR.R  #Subtract, two registers
        format=000100000001DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=SUBR.V  #Subtract, register and 8-bit value
        format=000110000001DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=ANDB.R  #Bitwise AND, two registers
        format=000100000010DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ANDB.V  #Bitwise AND, register and 8-bit value
        format=000110000010DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=ORBT.R  #Bitwise OR, two registers
        format=000100000011DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ORBT.V  #Bitwise OR, register and 8-bit value
        format=000110000011DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=XORB.R  #Bitwise XOR, two registers
        format=000100000100DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=XORB.V  #Bitwise XOR, register and 8-bit value
        format=000110000100DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=NOTB.R  #Bitwise NOT, one register
        format=000100000101DDDDAAAA000000000000
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
    endinst
    
    inst=ARSL.R  #Arithmetic left shift, two registers
        format=000100000110DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ARSL.V  #Arithmetic right shift, register and 8-bit value
        format=000110000110DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=ARSR.R  #Arithmetic right shift, two registers
        format=000100000111DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ARSR.V  #Arithmetic right shift, register and 8-bit value
        format=000110000111DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=LOSR.R  #Logical shift right, two registers
        format=000100001000DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=LOSR.V  #Logical shift right, register and 8-bit value
        format=000110001000DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=ROTL.R  #Rotate left, two registers
        format=000100001001DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ROTL.V  #Rotate left, register and 8-bit value
        format=000110001001DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=ROTR.R  #Rotate right, two registers
        format=000100001010DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=ROTR.V  #Rotate right, register and 8-bit value
        format=000110001010DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=MSKI.R  #Inverse mask, two registers
        format=000100001011DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=MSKI.V  #Inverse mask, register and 8-bit value
        format=000110001011DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=MASL.R  #Mask and shift left, two registers
        format=000100001100DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=MASL.V  #Mask and shift left, register and 8-bit value
        format=000110001100DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=MASR.R  #Mask and shift right, two registers
        format=000100001101DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=MASR.V  #Mask and shift right, register and 8-bit value
        format=000110001101DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    inst=CMPR.R  #Compare, two registers
        format=000100001110DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=CMPR.V  #Compare, register and 8-bit value
        format=000110001110DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
   
    inst=TEST.R  #Test, two registers
        format=000100001111DDDDAAAABBBBVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
        V=VALUE:h0
    endinst
    
    inst=TEST.V  #Test, register and 8-bit value
        format=000110001111DDDDAAAASSSSVVVVVVVV
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE:h0
    endinst
    
    # # # # # # # #
    
    inst=MOVE.R  #Move, two register
        format=00001000DDDDSSSS0000000000000000
        D=ENUMT:REGISTER
        S=ENUMT:REGISTER
    endinst
    
    inst=MOVE.S  #Move, two register swap
        format=00001001DDDDSSSS0000000000000000
        D=ENUMT:REGISTER
        S=ENUMT:REGISTER
    endinst
    
    # # # # # # # #
    
    inst=NOOP.I  #No operation, implied
        format=00000100000000000000000000000000
    endinst
    
    inst=SWIN.V  #Software interrupt, 8-bit ID
        format=000001000001DDDDDDDD000000000000
        D=VALUE:h0
    endinst
    
    inst=HALT.I  #Halt, implied
        format=00000100001000000000000000000000
    endinst
    
    inst=SRPG.V  #Set register page, 4-bit value and flag
        format=000001000011PPPPH000000000000000
        P=VALUE:h0
        H=ENUMT:BOOLEAN:TRUE
    endinst
    
endcore
