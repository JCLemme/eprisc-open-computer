# epRISC v4 - core definition file

core=EPRISC_STD
    
    enum:REGISTER=PC:0/SP:1/CS:2/GL:3/WW:0/WX:1/WY:2/WZ:3/XW:4/XX:5/XY:6/XZ:7/YW:8/YX:9/YY:10/YZ:11/ZW:12/ZX:13/ZY:14/ZZ:15
    
    enum:CONDITION=ALC:0/EQL:1/NEQ:2/HOS:3/LOW:4/NEG:5/POZ:6/OVF:7/NOV:8/HIG:9/LOS:10/GET:11/LET:12/GRT:13/LST:14
    
    enum:BRANCHALT=NONE:0/SVLK:4/SVSK:5/RSLK:6/RSSK:7
    
    enum:BOOLEAN=FALSE:0/TRUE:1
       
    inst=ADDR.R  #Add, two registers
        format=CCCC0110DDDDAAAABBBB000000000000
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=ADDR.V  #Add, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV0000
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=SUBR.R  #Subtract, two registers
        format=CCCC0110DDDDAAAABBBB000000000001
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=SUBR.V  #Subtract, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV0001
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=INCR.R  #Increment, one register
        format=CCCC0110DDDDAAAA0000000000000010
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
    endinst
    
    inst=DECR.R  #Decrement, one register
        format=CCCC0110DDDDAAAA0000000000000011
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
    endinst
    
    inst=ANDB.R  #Bitwise AND, two registers
        format=CCCC0110DDDDAAAABBBB000000000100
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=ANDB.V  #Bitwise AND, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV0100
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=ORBT.R  #Bitwise OR, two registers
        format=CCCC0110DDDDAAAABBBB000000000101
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=ORBT.V  #Bitwise OR, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV0101
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=XORB.R  #Bitwise XOR, two registers
        format=CCCC0110DDDDAAAABBBB000000000110
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=XORB.V  #Bitwise XOR, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV0110
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=NOTB.R  #Bitwise NOT, one register
        format=CCCC0110DDDDAAAA0000000000000111
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
    endinst
    
    inst=ARSL.R  #Arithmetic left shift, two registers
        format=CCCC0110DDDDAAAABBBB000000001000
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=ARSL.V  #Arithmetic left shift, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV1000
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=ARSR.R  #Arithmetic right shift, two registers
        format=CCCC0110DDDDAAAABBBB000000001001
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=ARSR.V  #Arithmetic right shift, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV1001
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=LOSR.R  #Logical right shift, two registers
        format=CCCC0110DDDDAAAABBBB000000001010
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=LOSR.V  #Logical right shift, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV1010
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=ROTL.R  #Rotate left, two registers
        format=CCCC0110DDDDAAAABBBB000000001011
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=ROTL.V  #Rotate left, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV1011
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=ROTR.R  #Rotate right, two registers
        format=CCCC0110DDDDAAAABBBB000000001100
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=ROTR.V  #Rotate right, register and 8-bit value
        format=CCCC0111DDDDAAAASSSSVVVVVVVV1100
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=CMPR.R  #Compare, two registers
        format=CCCC01100000AAAABBBB000000001101
        C=ENUMT:CONDITION:ALC
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=CMPR.V  #Compare, register and 8-bit value
        format=CCCC01110000AAAASSSSVVVVVVVV1101
        C=ENUMT:CONDITION:ALC
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst
    
    inst=TEST.R  #Test, two registers
        format=CCCC01100000AAAABBBB000000001110
        C=ENUMT:CONDITION:ALC
        A=ENUMT:REGISTER
        B=ENUMT:REGISTER
    endinst
    
    inst=TEST.V  #Test, register and 8-bit value
        format=CCCC01110000AAAASSSSVVVVVVVV1110
        C=ENUMT:CONDITION:ALC
        A=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst


    inst=MOVE.V  #Move, 16-bit value
        format=CCCC0101DDDDSSSSVVVVVVVVVVVVVVVV
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        S=VALUE:h0
        V=VALUE
    endinst

    inst=MOVE.A  #Move, 16-bit address
        format=CCCC0101DDDDSSSSAAAAAAAAAAAAAAAA
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        S=VALUE:h0
        A=LABEL
    endinst
    
    inst=MOVE.R  #Move, two register 
        format=CCCC0100DDDDSSSS0000000000000000   
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        S=ENUMT:REGISTER
    endinst
    
    inst=MOVE.S  #Move, two register swap
        format=CCCC0100DDDDSSSS1000000000000000 
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        S=ENUMT:REGISTER
    endinst
    
    inst=LOAD.O  #Load, register and 16-bit offset
        format=CCCC0010RRRRDDDDOOOOOOOOOOOOOOOO
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        R=ENUMT:REGISTER
        O=VALUE:h0
    endinst
       
    inst=STOR.O  #Store, register and 16-bit offset
        format=CCCC0011RRRRSSSSOOOOOOOOOOOOOOOO
        C=ENUMT:CONDITION:ALC
        S=ENUMT:REGISTER
        R=ENUMT:REGISTER
        O=VALUE:h0
    endinst

    inst=LOAD.A  #Load, register and 16-bit offset
        format=CCCC0010RRRRDDDDAAAAAAAAAAAAAAAA
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
        R=ENUMT:REGISTER
        A=ADDRS
    endinst
       
    inst=STOR.A  #Store, register and 16-bit offset
        format=CCCC0011RRRRSSSSAAAAAAAAAAAAAAAA
        C=ENUMT:CONDITION:ALC
        S=ENUMT:REGISTER
        R=ENUMT:REGISTER
        A=ADDRS
    endinst

    inst=PUSH.R  #Load, push to stack
        format=CCCC00110001SSSS0000000000000000
        C=ENUMT:CONDITION:ALC
        S=ENUMT:REGISTER
    endinst
       
    inst=POPS.R  #Store, pop from stack
        format=CCCC00100001DDDD0000000000000000
        C=ENUMT:CONDITION:ALC
        D=ENUMT:REGISTER
    endinst
    
    inst=BRCH.O  #Branch, register and 19-bit offset
        format=CCCC1LLLRRRRIOOOOOOOOOOOOOOOOOOO
        C=ENUMT:CONDITION:ALC
        L=ENUMT:BRANCHALT:NONE
        R=ENUMT:REGISTER:PC
        I=ENUMT:BOOLEAN:FALSE
        O=VALUE:h00
    endinst
 
    inst=BRCH.A  #Branch, register and 19-bit offset (address bound)
        format=CCCC1LLLRRRRIAAAAAAAAAAAAAAAAAAA
        C=ENUMT:CONDITION:ALC
        L=ENUMT:BRANCHALT:NONE
        R=ENUMT:REGISTER:PC
        I=ENUMT:BOOLEAN:FALSE
        A=ADDRS
    endinst
    
    inst=NOOP.I  #No operation, implied
        format=CCCC0001000000000000000000000000
        C=ENUMT:CONDITION:ALC
    endinst
    
    inst=SWIN.V  #Software interrupt, implied
        format=CCCC0001000100000000000000000000
        C=ENUMT:CONDITION:ALC
        V=VALUE
    endinst
    
    inst=HALT.I  #Halt, implied
        format=CCCC0001001000000000000000000000
        C=ENUMT:CONDITION:ALC
    endinst
    
    inst=SRPG.V  #Set register page, 4-bit value
        format=CCCC000100110000000000000000PPPP
        C=ENUMT:CONDITION:ALC
        S=ENUMT:BOOLEAN:TRUE
        P=VALUE
    endinst
    
endcore
